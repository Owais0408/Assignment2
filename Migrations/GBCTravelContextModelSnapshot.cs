// <auto-generated />
using System;
using GBCTravel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GBCTravel.Migrations
{
    [DbContext(typeof(GBCTravelContext))]
    partial class GBCTravelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GBCTravel.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<string>("bookingtype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingDate = new DateOnly(2024, 4, 15),
                            bookingtype = "Car",
                            price = 20.0
                        });
                });

            modelBuilder.Entity("GBCTravel.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Car");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Toyota",
                            Color = "Blue",
                            DailyRate = 50m,
                            IsAvailable = true,
                            Model = "Corolla"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Honda",
                            Color = "Black",
                            DailyRate = 60m,
                            IsAvailable = true,
                            Model = "Civic"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Ford",
                            Color = "White",
                            DailyRate = 55m,
                            IsAvailable = false,
                            Model = "Focus"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Chevrolet",
                            Color = "Silver",
                            DailyRate = 45m,
                            IsAvailable = true,
                            Model = "Malibu"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Nissan",
                            Color = "Red",
                            DailyRate = 48m,
                            IsAvailable = true,
                            Model = "Altima"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "BMW",
                            Color = "Gray",
                            DailyRate = 70m,
                            IsAvailable = true,
                            Model = "3 Series"
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Mercedes-Benz",
                            Color = "Black",
                            DailyRate = 80m,
                            IsAvailable = false,
                            Model = "C-Class"
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Audi",
                            Color = "White",
                            DailyRate = 75m,
                            IsAvailable = true,
                            Model = "A4"
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Volkswagen",
                            Color = "Blue",
                            DailyRate = 52m,
                            IsAvailable = true,
                            Model = "Jetta"
                        },
                        new
                        {
                            Id = 10,
                            Brand = "Hyundai",
                            Color = "Silver",
                            DailyRate = 47m,
                            IsAvailable = true,
                            Model = "Elantra"
                        },
                        new
                        {
                            Id = 11,
                            Brand = "Kia",
                            Color = "White",
                            DailyRate = 53m,
                            IsAvailable = true,
                            Model = "Forte"
                        },
                        new
                        {
                            Id = 12,
                            Brand = "Subaru",
                            Color = "Blue",
                            DailyRate = 55m,
                            IsAvailable = false,
                            Model = "Legacy"
                        },
                        new
                        {
                            Id = 13,
                            Brand = "Mazda",
                            Color = "Red",
                            DailyRate = 49m,
                            IsAvailable = true,
                            Model = "Mazda3"
                        },
                        new
                        {
                            Id = 14,
                            Brand = "Lexus",
                            Color = "Black",
                            DailyRate = 85m,
                            IsAvailable = true,
                            Model = "IS"
                        },
                        new
                        {
                            Id = 15,
                            Brand = "Infiniti",
                            Color = "Gray",
                            DailyRate = 78m,
                            IsAvailable = true,
                            Model = "Q60"
                        },
                        new
                        {
                            Id = 16,
                            Brand = "Tesla",
                            Color = "White",
                            DailyRate = 90m,
                            IsAvailable = true,
                            Model = "Model 3"
                        },
                        new
                        {
                            Id = 17,
                            Brand = "Porsche",
                            Color = "Red",
                            DailyRate = 150m,
                            IsAvailable = true,
                            Model = "911"
                        },
                        new
                        {
                            Id = 18,
                            Brand = "Jaguar",
                            Color = "Blue",
                            DailyRate = 120m,
                            IsAvailable = true,
                            Model = "XE"
                        },
                        new
                        {
                            Id = 19,
                            Brand = "Land Rover",
                            Color = "Green",
                            DailyRate = 110m,
                            IsAvailable = true,
                            Model = "Discovery"
                        },
                        new
                        {
                            Id = 20,
                            Brand = "Volvo",
                            Color = "Silver",
                            DailyRate = 65m,
                            IsAvailable = true,
                            Model = "S60"
                        },
                        new
                        {
                            Id = 21,
                            Brand = "Jeep",
                            Color = "Yellow",
                            DailyRate = 80m,
                            IsAvailable = true,
                            Model = "Wrangler"
                        },
                        new
                        {
                            Id = 22,
                            Brand = "Toyota",
                            Color = "Black",
                            DailyRate = 55m,
                            IsAvailable = false,
                            Model = "Rav4"
                        },
                        new
                        {
                            Id = 23,
                            Brand = "Ford",
                            Color = "White",
                            DailyRate = 58m,
                            IsAvailable = true,
                            Model = "Edge"
                        },
                        new
                        {
                            Id = 24,
                            Brand = "Honda",
                            Color = "Silver",
                            DailyRate = 63m,
                            IsAvailable = true,
                            Model = "HR-V"
                        },
                        new
                        {
                            Id = 25,
                            Brand = "Chevrolet",
                            Color = "Black",
                            DailyRate = 70m,
                            IsAvailable = true,
                            Model = "Trax"
                        },
                        new
                        {
                            Id = 26,
                            Brand = "Subaru",
                            Color = "Green",
                            DailyRate = 80m,
                            IsAvailable = true,
                            Model = "Crosstrek"
                        },
                        new
                        {
                            Id = 27,
                            Brand = "Mazda",
                            Color = "Blue",
                            DailyRate = 68m,
                            IsAvailable = true,
                            Model = "CX-3"
                        },
                        new
                        {
                            Id = 28,
                            Brand = "Toyota",
                            Color = "Red",
                            DailyRate = 72m,
                            IsAvailable = true,
                            Model = "Tacoma"
                        },
                        new
                        {
                            Id = 29,
                            Brand = "Ford",
                            Color = "Gray",
                            DailyRate = 66m,
                            IsAvailable = true,
                            Model = "Expedition"
                        },
                        new
                        {
                            Id = 30,
                            Brand = "Hyundai",
                            Color = "Silver",
                            DailyRate = 58m,
                            IsAvailable = true,
                            Model = "Tucson"
                        });
                });

            modelBuilder.Entity("GBCTravel.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Flight");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Airline = "Emirates",
                            ArrivalTime = new DateTime(2024, 4, 16, 1, 1, 23, 652, DateTimeKind.Local).AddTicks(7084),
                            DepartureTime = new DateTime(2024, 4, 15, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7079),
                            Destination = "JFK",
                            Origin = "DXB",
                            Price = 800.00m
                        },
                        new
                        {
                            Id = 2,
                            Airline = "British Airways",
                            ArrivalTime = new DateTime(2024, 4, 16, 22, 1, 23, 652, DateTimeKind.Local).AddTicks(7097),
                            DepartureTime = new DateTime(2024, 4, 16, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7092),
                            Destination = "SFO",
                            Origin = "LHR",
                            Price = 900.00m
                        },
                        new
                        {
                            Id = 3,
                            Airline = "American Airlines",
                            ArrivalTime = new DateTime(2024, 4, 17, 14, 1, 23, 652, DateTimeKind.Local).AddTicks(7107),
                            DepartureTime = new DateTime(2024, 4, 17, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7103),
                            Destination = "ORD",
                            Origin = "JFK",
                            Price = 300.00m
                        },
                        new
                        {
                            Id = 4,
                            Airline = "Qantas",
                            ArrivalTime = new DateTime(2024, 4, 19, 0, 1, 23, 652, DateTimeKind.Local).AddTicks(7117),
                            DepartureTime = new DateTime(2024, 4, 18, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7113),
                            Destination = "LAX",
                            Origin = "SYD",
                            Price = 1000.00m
                        },
                        new
                        {
                            Id = 5,
                            Airline = "Air Canada",
                            ArrivalTime = new DateTime(2024, 4, 19, 18, 1, 23, 652, DateTimeKind.Local).AddTicks(7126),
                            DepartureTime = new DateTime(2024, 4, 19, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7122),
                            Destination = "LHR",
                            Origin = "YYZ",
                            Price = 700.00m
                        },
                        new
                        {
                            Id = 6,
                            Airline = "Lufthansa",
                            ArrivalTime = new DateTime(2024, 4, 20, 20, 1, 23, 652, DateTimeKind.Local).AddTicks(7135),
                            DepartureTime = new DateTime(2024, 4, 20, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7132),
                            Destination = "JFK",
                            Origin = "FRA",
                            Price = 850.00m
                        },
                        new
                        {
                            Id = 7,
                            Airline = "Singapore Airlines",
                            ArrivalTime = new DateTime(2024, 4, 21, 15, 1, 23, 652, DateTimeKind.Local).AddTicks(7145),
                            DepartureTime = new DateTime(2024, 4, 21, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7141),
                            Destination = "HKG",
                            Origin = "SIN",
                            Price = 400.00m
                        },
                        new
                        {
                            Id = 8,
                            Airline = "Cathay Pacific",
                            ArrivalTime = new DateTime(2024, 4, 22, 23, 1, 23, 652, DateTimeKind.Local).AddTicks(7154),
                            DepartureTime = new DateTime(2024, 4, 22, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7151),
                            Destination = "LAX",
                            Origin = "HKG",
                            Price = 950.00m
                        },
                        new
                        {
                            Id = 9,
                            Airline = "United Airlines",
                            ArrivalTime = new DateTime(2024, 4, 23, 16, 1, 23, 652, DateTimeKind.Local).AddTicks(7164),
                            DepartureTime = new DateTime(2024, 4, 23, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7160),
                            Destination = "SFO",
                            Origin = "ORD",
                            Price = 600.00m
                        },
                        new
                        {
                            Id = 10,
                            Airline = "Delta Air Lines",
                            ArrivalTime = new DateTime(2024, 4, 24, 13, 1, 23, 652, DateTimeKind.Local).AddTicks(7173),
                            DepartureTime = new DateTime(2024, 4, 24, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7170),
                            Destination = "LGA",
                            Origin = "ATL",
                            Price = 250.00m
                        },
                        new
                        {
                            Id = 11,
                            Airline = "Southwest Airlines",
                            ArrivalTime = new DateTime(2024, 4, 25, 12, 1, 23, 652, DateTimeKind.Local).AddTicks(7183),
                            DepartureTime = new DateTime(2024, 4, 25, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7179),
                            Destination = "HOU",
                            Origin = "DAL",
                            Price = 150.00m
                        },
                        new
                        {
                            Id = 12,
                            Airline = "Air France",
                            ArrivalTime = new DateTime(2024, 4, 26, 22, 1, 23, 652, DateTimeKind.Local).AddTicks(7193),
                            DepartureTime = new DateTime(2024, 4, 26, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7189),
                            Destination = "LAX",
                            Origin = "CDG",
                            Price = 900.00m
                        },
                        new
                        {
                            Id = 13,
                            Airline = "KLM Royal Dutch Airlines",
                            ArrivalTime = new DateTime(2024, 4, 27, 19, 1, 23, 652, DateTimeKind.Local).AddTicks(7202),
                            DepartureTime = new DateTime(2024, 4, 27, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7198),
                            Destination = "JFK",
                            Origin = "AMS",
                            Price = 800.00m
                        },
                        new
                        {
                            Id = 14,
                            Airline = "Qatar Airways",
                            ArrivalTime = new DateTime(2024, 4, 28, 18, 1, 23, 652, DateTimeKind.Local).AddTicks(7212),
                            DepartureTime = new DateTime(2024, 4, 28, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7208),
                            Destination = "LHR",
                            Origin = "DOH",
                            Price = 700.00m
                        },
                        new
                        {
                            Id = 15,
                            Airline = "Virgin Atlantic",
                            ArrivalTime = new DateTime(2024, 4, 29, 19, 1, 23, 652, DateTimeKind.Local).AddTicks(7221),
                            DepartureTime = new DateTime(2024, 4, 29, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7217),
                            Destination = "JFK",
                            Origin = "LHR",
                            Price = 850.00m
                        },
                        new
                        {
                            Id = 16,
                            Airline = "Turkish Airlines",
                            ArrivalTime = new DateTime(2024, 5, 1, 0, 1, 23, 652, DateTimeKind.Local).AddTicks(7231),
                            DepartureTime = new DateTime(2024, 4, 30, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7227),
                            Destination = "SFO",
                            Origin = "IST",
                            Price = 950.00m
                        },
                        new
                        {
                            Id = 17,
                            Airline = "Swiss International Air Lines",
                            ArrivalTime = new DateTime(2024, 5, 1, 21, 1, 23, 652, DateTimeKind.Local).AddTicks(7240),
                            DepartureTime = new DateTime(2024, 5, 1, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7236),
                            Destination = "ORD",
                            Origin = "ZRH",
                            Price = 750.00m
                        },
                        new
                        {
                            Id = 18,
                            Airline = "Etihad Airways",
                            ArrivalTime = new DateTime(2024, 5, 3, 2, 1, 23, 652, DateTimeKind.Local).AddTicks(7249),
                            DepartureTime = new DateTime(2024, 5, 2, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7246),
                            Destination = "LAX",
                            Origin = "AUH",
                            Price = 1100.00m
                        },
                        new
                        {
                            Id = 19,
                            Airline = "Finnair",
                            ArrivalTime = new DateTime(2024, 5, 3, 20, 1, 23, 652, DateTimeKind.Local).AddTicks(7259),
                            DepartureTime = new DateTime(2024, 5, 3, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7255),
                            Destination = "JFK",
                            Origin = "HEL",
                            Price = 800.00m
                        },
                        new
                        {
                            Id = 20,
                            Airline = "Aeroflot",
                            ArrivalTime = new DateTime(2024, 5, 4, 23, 1, 23, 652, DateTimeKind.Local).AddTicks(7268),
                            DepartureTime = new DateTime(2024, 5, 4, 11, 1, 23, 652, DateTimeKind.Local).AddTicks(7265),
                            Destination = "LAX",
                            Origin = "SVO",
                            Price = 1000.00m
                        });
                });

            modelBuilder.Entity("GBCTravel.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PricePerNight")
                        .HasColumnType("real");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Hotel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://tse4.mm.bing.net/th?id=OIP.hE1EAKib61djIy0oT6p1pwHaEo&pid=Api&P=0&h=180",
                            Location = "Thailand",
                            Name = "Royal Orchid Palace",
                            PricePerNight = 1800f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://tse2.mm.bing.net/th?id=OIP.nY9p3m9fkYlaNAGErx02EQHaEx&pid=Api&P=0&h=180",
                            Location = "Maldives",
                            Name = "Paradise Resort",
                            PricePerNight = 2500f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://tse2.mm.bing.net/th?id=OIP.4rlEynHtw33lqN3HwWHe0QAAAA&pid=Api&P=0&h=180",
                            Location = "Bali",
                            Name = "Sunset View Hotel",
                            PricePerNight = 2000f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://tse4.mm.bing.net/th?id=OIP.GWsjuIpVJdRUZPMQsMcFcQHaE8&pid=Api&P=0&h=180",
                            Location = "Dubai",
                            Name = "Grand Mirage",
                            PricePerNight = 3000f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://tse4.mm.bing.net/th?id=OIP.HkxrmC__Yr2oPED3RPHJkwHaEN&pid=Api&P=0&h=180",
                            Location = "Hawaii",
                            Name = "Oceanfront Suites",
                            PricePerNight = 2800f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://tse4.mm.bing.net/th?id=OIP.AQFl8i6B-Y9iBWIIaSk9uAHaE7&pid=Api&P=0&h=180",
                            Location = "Switzerland",
                            Name = "Mountain Vista Inn",
                            PricePerNight = 2200f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://tse2.mm.bing.net/th?id=OIP.9JFne8p7tuUYC5qk2EUhcgHaEK&pid=Api&P=0&h=180",
                            Location = "Australia",
                            Name = "Coral Sands Resort",
                            PricePerNight = 1900f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://tse4.mm.bing.net/th?id=OIP.AiVqKkzPME1Noqt1GhdmSwHaE8&pid=Api&P=0&h=180",
                            Location = "Canada",
                            Name = "Riverfront Retreat",
                            PricePerNight = 2100f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "https://tse2.mm.bing.net/th?id=OIP.Ryamq96jtDOKId2Zit8kOAHaE7&pid=Api&P=0&h=180",
                            Location = "Norway",
                            Name = "Cozy Cabin Lodge",
                            PricePerNight = 2300f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "https://tse1.mm.bing.net/th?id=OIP.C8vkMkOyrfmnMcDY6SZTbgHaEP&pid=Api&P=0&h=180",
                            Location = "Greece",
                            Name = "Sapphire Shores Hotel",
                            PricePerNight = 2600f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "https://tse4.mm.bing.net/th?id=OIP.nizjMP3ZtJd3SKjsopQnZgHaEo&pid=Api&P=0&h=180",
                            Location = "Fiji",
                            Name = "Silver Lagoon Resort",
                            PricePerNight = 2700f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "https://tse2.mm.bing.net/th?id=OIP.jmrYqoE15FukY39kaMSPRAHaE8&pid=Api&P=0&h=180",
                            Location = "Jamaica",
                            Name = "Emerald Bay Hotel",
                            PricePerNight = 2400f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "https://tse3.mm.bing.net/th?id=OIP.takzeirYv2xe0_zF4cT9HwHaD7&pid=Api&P=0&h=180",
                            Location = "Bahamas",
                            Name = "Golden Sands Inn",
                            PricePerNight = 3200f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 14,
                            ImageUrl = "https://tse2.mm.bing.net/th?id=OIP.JCegYJ7Bsc6G6x6V7Ua52wHaE6&pid=Api&P=0&h=180",
                            Location = "Monaco",
                            Name = "Platinum Heights",
                            PricePerNight = 2900f,
                            RoomNumber = 0,
                            status = true
                        },
                        new
                        {
                            Id = 15,
                            ImageUrl = "https://tse4.mm.bing.net/th?id=OIP.siWf5qBoGWFQH_gNmvjaOAAAAA&pid=Api&P=0&h=180",
                            Location = "Barbados",
                            Name = "Diamond Crest Resort",
                            PricePerNight = 3100f,
                            RoomNumber = 0,
                            status = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
